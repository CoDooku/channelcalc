# Название конвейера
name: CMake

# Управление событиями запуска конвейера
on:
# Для всех веток при наличии события push и pull request
  push:
    branches: '*'
  pull_request:
    branches: '*'
  workflow_call:

# Возможность ручного запуска конвейера из меню Actions
  # workflow_dispatch:

# Переменные окружения конвейера
env:
# Настройка вида сборки CMake (Release, Debug, RelWithDebInfo и т.п.)
  BUILD_TYPE: Release

# Работы конвейера
jobs:
# Сборка приложения с wxWidgets под windows-latest (x64)
  build-cpp-windows:
    name: C++/Win32 (windows22-image)
    runs-on: windows-2022

    env:
      wxMSW_VER: 3.2.0
      WXWIN: c:\wx

    steps:
      - uses: actions/checkout@v3
      - name: Download wxWidgets
        run: |
          mkdir ${env:WXWIN} | Out-Null
          cd ${env:WXWIN}
          curl -OL https://github.com/SergeiLitvinov/wxWidgets-static-compiled/releases/download/${env:wxMSW_VER}/wxWidgets-${env:wxMSW_VER}-headers.7z  
          7z x wxWidgets-${env:wxMSW_VER}-headers.7z
          curl -OL https://github.com/SergeiLitvinov/wxWidgets-static-compiled/releases/download/${env:wxMSW_VER}/wxMSW-${env:wxMSW_VER}_gcc1120_x64_Dev.7z
          7z x wxMSW-${env:wxMSW_VER}_gcc1120_x64_Dev.7z
          ls
          cd lib
          ls
          cd gcc_x64_lib
          ls
      - name: Build app
        # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        # run: cmake --build --config ${{env.BUILD_TYPE}}
        run: |
          cd ${{github.workspace}}
          cmake . -G "MinGW Makefiles" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=RELEASE
          cd ${{github.workspace}}/build
          make -j8
      # - name: Test
      #  working-directory: ${{github.workspace}}/build
      #  run: ctest -C ${{env.BUILD_TYPE}}
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Build output
          path: |
            ${{github.workspace}}/build/channelcalc.exe
        
   # - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #  run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}    
